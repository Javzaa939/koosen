from rest_framework.views import APIView
from django.db.models import Q

from .serializer import NotificationListSerializer

from .utils import (
    get_model,
    get_function_from_string,
)
from .settings import (
    NOTIFICATION_MODEL,
    NOTIFICATIONSTATE_MODEL,
    NOTIFICATIONTYPE_MODEL,
    LOGIN_REQUIRED_PATH
)


login_required = get_function_from_string(LOGIN_REQUIRED_PATH)


def _get_filters(request):

    user = request.user
    student = None
    salbar = None
    sub_org = None
    salbar = None
    org = None

    filters = Q()
    if hasattr(user, 'student'):
        student = user.student
        salbar = student.department_id
        sub_org = student.school_id
        org = student.school.org_id

    else:
        employee = request.user.employee
        salbar = employee.org_id
        sub_org = employee.sub_org_id
        salbar = employee.salbar_id

    full_filter = Q()

    filters = Q()
    second_filters = Q()

    tree_true_filter = Q()

    if org:
        # SCOPE_KIND_ORG, 'Байгууллага'),
        _filter = Q(org__id=org)
        filters.add(_filter, Q.OR)

        tree_true_filter.add(Q(tree_org_id=org), Q.OR)

    if sub_org:
        # (SCOPE_KIND_SUBORG, 'Дэд байгууллага'),
        _filter = Q(sub_org__id=sub_org)
        filters.add(_filter, Q.OR)
        tree_true_filter.add(Q(tree_sub_org_id=sub_org), Q.OR)

    if salbar:
        # (SCOPE_KIND_SUBORG, 'Дэд байгууллага'),
        _filter = Q(salbar__id=salbar)
        filters.add(_filter, Q.OR)
        tree_true_filter.add(Q(tree_salbar_id=salbar), Q.OR)

    if student:
        # (SCOPE_KIND_GROUP, 'Анги'),
        _filter = Q(groups__contains=[student.group_id])
        filters.add(_filter, Q.OR)
        # (SCOPE_KIND_PROFESSION, 'Мэргэжил'),
        _filter = Q(profs__contains=[student.group.profession_id])
        filters.add(_filter, Q.OR)
        # (SCOPE_KIND_KURS, 'Курс'),
        _filter = Q(kurs__contains=[student.group.level])
        filters.add(_filter, Q.OR)
        # (SCOPE_KIND_OYUTAN, 'Оюутан'),
        _filter = Q(oyutans__contains=[student.id])
        filters.add(_filter, Q.OR)
    else:
        employee = request.user.employee
        if employee:
            # (SCOPE_KIND_EMPLOYEE, 'Алба хаагч'),
            filters.add(Q(employees=employee), Q.OR)
            # (SCOPE_KIND_POS, 'Албан тушаал'),
            filters.add(Q(org_position=employee.org_position), Q.OR)
            tree_true_filter.add(Q(tree_org_position=employee.org_position), Q.OR)

        # (SCOPE_KIND_USER, 'Хэрэглэгч'),
        filters.add(Q(users=request.user), Q.OR)

    tree_true_filter.add(Q(tree_kind=True), Q.AND)
    second_filters.add(tree_true_filter, Q.OR)
    second_filters.add(Q(tree_kind=False), Q.OR)

    # (SCOPE_KIND_ALL, 'Бүгд'),
    filters.add(Q(is_all=True), Q.OR)
    # filters.add(Q(created_at__gte=request.user.date_joined), Q.AND)

    full_filter.add(filters, Q.OR)
    full_filter.add(second_filters, Q.AND)

    return full_filter


class NotificationAPIView(APIView):

    @login_required()
    def get(self, request):

        page = int(request.GET.get('page'))
        show_count = int(request.GET.get('show_count') or 6)

        skip = 0 + (page * show_count)
        limit = show_count * (page + 1)
        Notification = get_model(NOTIFICATION_MODEL)
        NotificationState = get_model(NOTIFICATIONSTATE_MODEL)

        filters = _get_filters(request)

        qs = Notification.objects.filter(filters).order_by("-created_at")[skip: limit]
        notifs = NotificationListSerializer(instance=qs, many=True, context={ "request": request }).data

        notif_state_qs = NotificationState.objects.filter(user=request.user, notif_id__in=qs.values_list('id'))

        data = {
            "notifs": notifs,
            "read_notifs": list(notif_state_qs.values_list("notif_id", flat=True))
        }

        return request.send_data(data)


class NotifChangeStateApiView(APIView):

    @login_required()
    def get(self, request, pk=None):

        Notification = get_model(NOTIFICATION_MODEL)
        NotificationState = get_model(NOTIFICATIONSTATE_MODEL)

        if pk == "all":

            filters = _get_filters(request)
            if hasattr(request.user, 'student'):
                not_read_notif_ids = (
                    Notification
                        .objects
                        .filter(filters)
                        .exclude(notificationstudentstate__user=request.user)
                        .values_list("id", flat=True)
                )
            else:
                not_read_notif_ids = (
                    Notification
                        .objects
                        .filter(filters)
                        .exclude(notificationstate__user=request.user)
                        .values_list("id", flat=True)
                )

            states = list()
            for not_id in not_read_notif_ids:
                states.append(
                    NotificationState(
                        notif_id=not_id,
                        user=request.user
                    )
                )

            if states:
                NotificationState.objects.bulk_create(states)
            return request.send_data(True)

        else:
            NotificationState.objects.create(user=request.user, notif_id=pk)
            return request.send_data(True)


class NotifInfoApiView(APIView):

    @login_required()
    def get(self, request):
        Notification = get_model(NOTIFICATION_MODEL)
        NotificationState = get_model(NOTIFICATIONSTATE_MODEL)

        filters = _get_filters(request)

        qs = Notification.objects.filter(filters)
        notif_state_qs = NotificationState.objects.filter(user=request.user, notif_id__in=qs.values_list('id'))

        all_count = qs.count()
        read_count = notif_state_qs.count()

        new_count = all_count - read_count

        data = {
            "new_count": new_count,
        }

        return request.send_data(data)
