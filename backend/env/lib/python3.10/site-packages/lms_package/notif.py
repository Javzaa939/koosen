from django.db import transaction

from .settings import (
    NOTIFICATION_MODEL,
    NOTIFICATIONSTATE_MODEL,
    NOTIFICATIONTYPE_MODEL
)
from .utils import get_model

# create_notif(
#     request,
#     [1],
#     "1 курсууд сонс",
#     "Бүгд орой тоглоно шүү",
#     Notification.FROM_KIND_USER,
#     Notification.SCOPE_KIND_KURS,
#     "important",
# )
def create_notif(
    request,
    scope_ids,
    title,
    content,
    from_kind,
    scope_kind,
    ntype,
    url="",
    tree_org=None,
    tree_sub_org=None,
    tree_salbar=None,
    tree_org_position=None,
):
    """
        Мэдэгдэл шинээр үүсгэх нь
        request бол request
        scope_ids гэдэг нь хамрах хүрээний id нууд
        title гарчиг
        content бол тайлбар
        from_kind хэнээс мэдэгдэл ирсэн гэдэг төлөв нь
        scope_kind хамрах хүрээний төрөл нь (хамрах хүрээний төрлөөс хамаараад scope_ids ийг тухайн field дээр хадгална)
        ntype notif ийн төрлийн code ийг нь бичиж өгнө
        url тухайн мэдэгдэл дараад үсрэх хуудасны url
    """
    with transaction.atomic():

        from_kind = int(from_kind)
        scope_kind = int(scope_kind)

        Notification = get_model(NOTIFICATION_MODEL)
        NotificationType = get_model(NOTIFICATIONTYPE_MODEL)
        ntype_obj = NotificationType.objects.filter(code=ntype).first()

        is_array = scope_kind in [
            Notification.SCOPE_KIND_OYUTAN,
            Notification.SCOPE_KIND_PROFESSION,
            Notification.SCOPE_KIND_KURS,
            Notification.SCOPE_KIND_GROUP
        ]

        scope_field = {
            Notification.SCOPE_KIND_ORG: "org",
            Notification.SCOPE_KIND_SUBORG: "sub_org",
            Notification.SCOPE_KIND_SALBAR: "salbar",
            Notification.SCOPE_KIND_POS: "org_position",
            Notification.SCOPE_KIND_EMPLOYEE: "employees",
            Notification.SCOPE_KIND_USER: "users",
            Notification.SCOPE_KIND_ALL: "is_all",
            Notification.SCOPE_KIND_OYUTAN: "oyutans",
            Notification.SCOPE_KIND_PROFESSION: "profs",
            Notification.SCOPE_KIND_KURS: "kurs",
            Notification.SCOPE_KIND_GROUP: "groups",
        }.get(scope_kind)

        from_field = {
            Notification.FROM_KIND_ORG: "from_org",
            Notification.FROM_KIND_SUBORG: "from_sub_org",
            Notification.FROM_KIND_SALBAR: "from_salbar",
            Notification.FROM_KIND_POS: "from_org_position",
            Notification.FROM_KIND_EMPLOYEE: "from_employees",
            Notification.FROM_KIND_USER: "from_users",
        }.get(from_kind)

        if not scope_field:
            raise request.send_error("ERR_013")

        # хаанаас гэдэг төрлөөс нь хамаарч тухайн хүний id ийг хадгалах
        from_dict = dict()
        if from_kind == Notification.FROM_KIND_ORG:
            from_dict[from_field] = request.org_filter.get("org")
        elif from_kind == Notification.FROM_KIND_SUBORG:
            from_dict[from_field] = request.org_filter.get("sub_org")
        elif from_kind == Notification.FROM_KIND_SALBAR:
            from_dict[from_field] = request.org_filter.get("salbar")
        elif from_kind == Notification.FROM_KIND_POS:
            from_dict[from_field] = request.employee.org_position
        elif from_kind == Notification.FROM_KIND_EMPLOYEE:
            from_dict[from_field] = request.employee
        elif from_kind == Notification.FROM_KIND_USER:
            from_dict[from_field] = request.user

        payload = {}
        payload.update(from_dict)
        if scope_field == "is_all":
            payload[scope_field] = True

        is_used_tree = False

        if tree_org:
            payload["tree_org"] = tree_org
            is_used_tree = True
        if tree_sub_org:
            payload["tree_sub_org"] = tree_sub_org
            is_used_tree = True
        if tree_salbar:
            payload["tree_salbar"] = tree_salbar
            is_used_tree = True
        if tree_org_position:
            payload["tree_org_position"] = tree_org_position
            is_used_tree = True

        payload["tree_kind"] = is_used_tree

        if is_array:
            payload[scope_field] = scope_ids

        obj = Notification.objects.create(
            **payload,
            title=title,
            content=content,
            from_kind=from_kind,
            scope_kind=scope_kind,
            ntype=ntype_obj,
            url=url,
        )

        if not is_array and scope_field != "is_all":
            attr = getattr(obj, scope_field)
            attr.set(scope_ids)

        return obj
